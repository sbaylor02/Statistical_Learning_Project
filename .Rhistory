#set all categorical variables as ordered factors
dat[col] <- lapply(dat[col], as.factor)
dat[col] <- lapply(dat[col], ordered)
#Rename the columns for easier use
colnames(dat) <- c("ID", "Reason", "Month", "Day", "Seasons", "Transportation_expense", "Distance", "Service_time", "Age", "Work_load", "Hit_target", "Disciplinary_failure", "Education", "Children", "Social_drinker", "Social_smoker", "Pet", "Weight", "Height", "BMI", "Absent_time")
#View the data
glimpse(dat)
#create a list of the numeric variables in the data set
nums <- unlist(lapply(dat, is.numeric))
#create a smaller data set of just numeric variables
dat.num <- dat[ , nums]
sapply(dat, function(x){sum(is.na(x))})
summary(dat$Absent_time)
dat %>%
count(Absent_time)
#change variable represent missed time one day or greater
dat <- dat %>%
mutate(Absent_time = ifelse(dat$Absent_time <= 8,0,1))
#save Absent_time as a factor in the data set
dat$Absent_time <- as.factor(dat$Absent_time)
#Transforming to Data Frame
dat <- as.data.frame(dat)
#plot the Absent_time
ggplot(data = dat,
aes(x = Absent_time)) +
geom_bar() +
theme_minimal()
#plot all variables vs. Absent_time
dat %>%
gather(-Absent_time, key = "var_name", value = "value") %>%
ggplot(aes(x = value, y = Absent_time)) +
geom_point() +
facet_wrap(~ var_name, scales = "free") +
theme_minimal()
#frequency table by ID
dat %>%
count(ID)
#bar chart
dat %>%
ggplot(aes(x = ID)) +
geom_bar() +
theme_minimal()
#ID
dat %>%
gather(-ID, key = "var_name", value = "value") %>%
ggplot(aes(x = value, y = ID)) +
geom_point() +
facet_wrap(~ var_name, scales = "free") +
theme_minimal()
#frequency table by Reason for Absence
dat %>%
count(Reason)
#bar chart
dat %>%
filter(Absent_time==0) %>%
ggplot(aes(x=Reason)) +
geom_bar() +
theme_minimal()
dat %>%
filter(Absent_time==1) %>%
ggplot(aes(x=Reason)) +
geom_bar() +
theme_minimal()
#Reason for absence
table(dat %>%
filter(Reason==0) %>%
select(Absent_time))
dat %>%
gather(-Reason, key = "var_name", value = "value") %>%
ggplot(aes(x = value, y = Reason)) +
geom_point() +
facet_wrap(~ var_name, scales = "free") +
theme_minimal()
#frequency table by Month of Absence
dat %>%
count(Month)
#bar chart
dat %>%
ggplot(aes(x=Month)) +
geom_bar() +
theme_minimal()
dat %>%
gather(-Month, key = "var_name", value = "value") %>%
ggplot(aes(x = value, y = Month)) +
geom_point() +
facet_wrap(~ var_name, scales = "free") +
theme_minimal()
#frequency table by Day of Absence
dat %>%
count(Day)
#bar chart
dat %>%
ggplot(aes(x=Month)) +
geom_bar() +
theme_minimal()
dat %>%
gather(-Day, key = "var_name", value = "value") %>%
ggplot(aes(x = value, y = Day)) +
geom_point() +
facet_wrap(~ var_name, scales = "free") +
theme_minimal()
#frequency table by Season of Absence
dat %>%
count(Seasons)
#bar chart
dat %>%
ggplot(aes(x=Seasons)) +
geom_bar() +
theme_minimal()
#Scatterplots for variable 'Seasons'
dat %>%
gather(-Seasons, key = "var_name", value = "value") %>%
ggplot(aes(x = value, y = Seasons)) +
geom_point() +
facet_wrap(~ var_name, scales = "free") +
theme_minimal()
#summary of transportation expenses
summary(dat$Transportation_expense)
#histograph
ggplot(data = dat,
aes(x = Transportation_expense)) +
geom_histogram(binwidth = 50) +
theme_minimal()
#Scatterplots for variable 'Transportation_expense'
dat %>%
gather(-Transportation_expense, key = "var_name", value = "value") %>%
ggplot(aes(x = value, y = Transportation_expense)) +
geom_point() +
facet_wrap(~ var_name, scales = "free") +
theme_minimal()
# Possible positive correlation seen between distance and Transportation_expense
#summary of distance
summary(dat$Distance)
#histogram
ggplot(data = dat,
aes(x = Distance)) +
geom_histogram(binwidth = 5) +
theme_minimal()
#Scatterplots for variable 'Distance'
dat %>%
gather(-Distance, key = "var_name", value = "value") %>%
ggplot(aes(x = value, y = Distance)) +
geom_point() +
facet_wrap(~ var_name, scales = "free") +
theme_minimal()
#Possible Positive correlation seen between distance and Transportation_expense
#summary for Service_time
summary(dat$Service_time)
#histogram
ggplot(data = dat,
aes(x = Service_time)) +
geom_histogram(bins = 20) +
theme_minimal()
#Scatterplots for variable 'Service_time'
dat %>%
gather(-Service_time, key = "var_name", value = "value") %>%
ggplot(aes(x = value, y = Service_time)) +
geom_point() +
facet_wrap(~ var_name, scales = "free") +
theme_minimal()
#summary for Age
summary(dat$Age)
#histogram
ggplot(data = dat,
aes(x = Age)) +
geom_histogram(bins = 20) +
theme_minimal()
#Scatterplots for variable 'Age'
dat %>%
gather(-Age, key = "var_name", value = "value") %>%
ggplot(aes(x = value, y = Age)) +
geom_point() +
facet_wrap(~ var_name, scales = "free") +
theme_minimal()
#summary for work load
summary(dat$Work_load)
#histogram
ggplot(data = dat,
aes(x = Work_load)) +
geom_histogram(binwidth = 5000) +
theme_minimal()
#Scatterplots for variable 'Work_load'
dat %>%
gather(-Work_load, key = "var_name", value = "value") %>%
ggplot(aes(x = value, y = Work_load)) +
geom_point() +
facet_wrap(~ var_name, scales = "free") +
theme_minimal()
#summary for hit target
summary(dat$Hit_target)
#histogram
ggplot(data = dat,
aes(x = Hit_target)) +
geom_histogram(bins = 20) +
theme_minimal()
#Scatterplots for variable 'Hit_target'
dat %>%
gather(-Hit_target, key = "var_name", value = "value") %>%
ggplot(aes(x = value, y = Hit_target)) +
geom_point() +
facet_wrap(~ var_name, scales = "free") +
theme_minimal()
#table for disciplinary failure
dat %>%
count(Disciplinary_failure)
#bar chart
ggplot(data = dat,
aes(x = Disciplinary_failure)) +
geom_bar() +
theme_minimal()
#Scatterplots for variable 'Disciplinary_failure'
dat %>%
gather(-Disciplinary_failure, key = "var_name", value = "value") %>%
ggplot(aes(x = value, y = Disciplinary_failure)) +
geom_point() +
facet_wrap(~ var_name, scales = "free") +
theme_minimal()
#table for education
dat %>%
count(Education)
#bar chart
ggplot(data = dat,
aes(x = Education)) +
geom_bar() +
theme_minimal()
#Scatterplots for variable 'Education'
dat %>%
gather(-Education, key = "var_name", value = "value") %>%
ggplot(aes(x = value, y = Education)) +
geom_point() +
facet_wrap(~ var_name, scales = "free") +
theme_minimal()
#table for number of children
dat %>%
count(Children)
#bar chart
ggplot(data = dat,
aes(x = Children)) +
geom_bar() +
theme_minimal()
#Scatterplots for variable 'Children'
dat %>%
gather(-Children, key = "var_name", value = "value") %>%
ggplot(aes(x = value, y = Children)) +
geom_point() +
facet_wrap(~ var_name, scales = "free") +
theme_minimal()
#table for social drinking
dat %>%
count(Social_drinker)
#bar chart
ggplot(data = dat,
aes(x = Social_drinker)) +
geom_bar() +
theme_minimal()
#Scatterplots for variable 'Social_drinker'
dat %>%
gather(-Social_drinker, key = "var_name", value = "value") %>%
ggplot(aes(x = value, y = Social_drinker)) +
geom_point() +
facet_wrap(~ var_name, scales = "free") +
theme_minimal()
#table for social smokers
dat %>%
count(Social_smoker)
#bar chart
ggplot(data = dat,
aes(x = Social_smoker)) +
geom_bar() +
theme_minimal()
#Scatterplots for variable 'Social_smoker'
dat %>%
gather(-Social_smoker, key = "var_name", value = "value") %>%
ggplot(aes(x = value, y = Social_smoker)) +
geom_point() +
facet_wrap(~ var_name, scales = "free") +
theme_minimal()
#summary for pets
summary(dat$Pet)
#histogram
ggplot(data = dat,
aes(x = Pet)) +
geom_bar() +
theme_minimal()
#Scatterplots for variable 'Pet'
dat %>%
gather(-Pet, key = "var_name", value = "value") %>%
ggplot(aes(x = value, y = Pet)) +
geom_point() +
facet_wrap(~ var_name, scales = "free") +
theme_minimal()
#summary of weight
summary(dat$Weight)
#histogram
ggplot(data = dat,
aes(x = Weight)) +
geom_histogram(bins = 15) +
theme_minimal()
#Scatterplots for variable 'Weight'
dat %>%
gather(-Weight, key = "var_name", value = "value") %>%
ggplot(aes(x = value, y = Weight)) +
geom_point() +
facet_wrap(~ var_name, scales = "free") +
theme_minimal()
#summary of height
summary(dat$Height)
#histogram
ggplot(data = dat,
aes(x = Height)) +
geom_histogram(bins = 10) +
theme_minimal()
#Scatterplots for variable 'Height'
dat.num %>%
gather(-Height, key = "var_name", value = "value") %>%
ggplot(aes(x = value, y = Height)) +
geom_point() +
facet_wrap(~ var_name, scales = "free") +
theme_minimal()
#summary for BMI
summary(dat$BMI)
#histogram
ggplot(data = dat,
aes(x = BMI)) +
geom_histogram(binwidth = 1) +
theme_minimal()
#Scatterplots for variable 'BMI'
dat %>%
gather(-BMI, key = "var_name", value = "value") %>%
ggplot(aes(x = value, y = BMI)) +
geom_point() +
facet_wrap(~ var_name, scales = "free") +
theme_minimal()
dat1 <- dat[-1]
#scale
scale <- sapply(dat1, is.numeric)
dat1[scale] <- lapply(dat1[scale],scale)
load( file='~/Documents/GitHub/Statistical_Learning_Project/errmatrix.RData')
load( file='~/Documents/GitHub/Statistical_Learning_Project/sensmatrix.RData')
load( file='~/Documents/GitHub/Statistical_Learning_Project/fmeasmatrix.RData')
load( file='~/Documents/GitHub/Statistical_Learning_Project/gmeanmatrix.RData')
err_graph <- melt(err_matrix)
ggplot(err_graph,
aes(x=Var2, y=value)) +
geom_boxplot() +
theme_minimal()
sens_graph <- melt(sensitivity_matrix)
ggplot(sens_graph,
aes(x=Var2, y=value)) +
geom_boxplot() +
theme_minimal()
fmeas_graph <- melt(fmeasure_matrix)
ggplot(fmeas_graph,
aes(x=Var2, y=value)) +
geom_boxplot() +
theme_minimal()
gmean_graph <- melt(gmean_matrix)
ggplot(gmean_graph,
aes(x=Var2, y=value)) +
geom_boxplot() +
theme_minimal()
set.seed(1876)
dat <- read_excel("~/Documents/GitHub/Statistical_Learning_Project/Absenteeism_at_work.xls")
col <- c("ID", "Reason for absence", "Month of absence", "Day of the week", "Seasons", "Disciplinary failure", "Education", "Social drinker",   "Social smoker")
dat[col] <- lapply(dat[col], as.factor)
colnames(dat) <- c("ID", "Reason", "Month", "Day", "Seasons", "Transportation_expense", "Distance", "Service_time", "Age", "Work_load", "Hit_target", "Disciplinary_failure", "Education", "Children", "Social_drinker", "Social_smoker", "Pet", "Weight", "Height", "BMI", "Absent_time")
nums <- unlist(lapply(dat, is.numeric))
dat.num <- dat[ , nums]
#change variable represent missed time one day or greater
dat <- dat %>% mutate(Absent_time= ifelse(dat$Absent_time <=8,0,1))
str(dat)
dat$Absent_time <- as.factor(dat$Absent_time)
#Transforming to Data Frame
dat <- as.data.frame(dat)
str(dat)
###Optimizing the KNN
#For the tunning of the KNN model, we are going to create another traning/test data sets.
#scaling the data:
dat_v <- dat #we are going to use dat_v for the manipulation
scale <- sapply(dat_v, is.numeric)
dat_v[scale] <- lapply(dat_v[scale],scale)
head(dat_v)
#predicting class:
AB_class <- dat_v[, 21]
names(AB_class) <- c(1:nrow(dat_v))
dat_v$ID <- c(1:nrow(dat_v))
dat_v <- dat_v[1:737,]
nrow(dat_v)
rand_permute <- sample(x = nrow(dat_v), size = nrow(dat_v))
all_id_random <- dat_v[rand_permute, "ID"]
dat_v <- dat_v[,-1] #remove ID
#random samples for training test
validate_id <- as.character(all_id_random[1:248])
training_id <- as.character(all_id_random[249:737])
dat_v_train <- dat_v[training_id, ]
dat_v_val <- dat_v[validate_id, ]
AB_class_train <- AB_class[training_id]
AB_class_val <- AB_class[validate_id]
table(AB_class_train)
#Study significance of the variables
p <- .6 # proportion of data for training
w <- sample(1:nrow(dat_v), nrow(dat_v)*p, replace=F)
data_train <-dat_v[w,]
data_test <- dat_v[-w,]
rf <- randomForest(Absent_time ~.,
data=data_train,
mtry=6,
ntree=50,
na.action=na.roughfix)
impfact <- importance(rf)
impfact <- as.list(impfact)
names(impfact) <- colnames(dat_v[,-20])
impfact2 <- unlist(impfact)
most_sig_stats <- names(sort(desc(impfact2)))
#As per 'most_sig_stats' the 5 most significant variables for the prediction are:
#'Seasons', 'Reason', 'Service_time', 'Month' and 'work_load'
#Re ordering variables by significance:
dat_v_train_ord <- dat_v_train[ c(most_sig_stats)]
str(dat_v_train_ord)
dat_v_val_ord <- dat_v_val[, names(dat_v_train_ord)]
str(dat_v_val_ord)
#Monte Carlo Validation:
size <- length(training_id)
(2/3) * length(training_id)
training_family_L <- lapply(1:500, function(j) {
perm <- sample(1:size, size = size, replace = F)
shuffle <- training_id[perm]
trn <- shuffle[1:326]
trn
})
validation_family_L <- lapply(training_family_L,
function(x) setdiff(training_id, x))
#Finding an optimal set of variables and optimal k
N <- seq(from = 2, to = 19, by = 1)
sqrt(length(training_family_L[[1]]))
K <- seq(from = 1, to = 15, by = 1)
times <- 500 * length(N) * length(K)
#Execution of the test with loops
paramter_errors_df <- data.frame(mc_index = as.integer(rep(NA, times = times)),
var_num = as.integer(rep(NA, times = times)),
k = as.integer(rep(NA, times = times)),
error = as.numeric(rep(NA, times = times)))
#Core knn_model:
# j = index, n = length of range of variables, k=k
core_knn <- function(j, n, k) {
knn_predict <- knn(train = dat_v_train_ord[training_family_L[[j]], 1:n],
test = dat_v_train_ord[validation_family_L[[j]], 1:n],
cl = AB_class_train[training_family_L[[j]]],
k = k)
tbl <- table(knn_predict, AB_class_train[validation_family_L[[j]]])
err <- (tbl[1, 2] + tbl[2, 1])/(tbl[1, 2] + tbl[2, 1]+tbl[1, 1] + tbl[2, 2])
err
}
param_df1 <- merge(data.frame(mc_index = 1:500), data.frame(var_num = N))
param_df <- merge(param_df1, data.frame(k = K))
knn_err_est_df <- ddply(param_df[1:times, ], .(mc_index, var_num, k), function(df) {
err <- core_knn(df$mc_index[1], df$var_num[1], df$k[1])
err
})
table(dat$Absent_time)
most_sig_stats <- names(sort(desc(impfact2)))
most_sig_stats
impfact <- importance(rf)
impfact
impfact <- as.list(impfact)
names(impfact) <- colnames(dat_v[,-20])
impfact2 <- unlist(impfact)
most_sig_stats <- names(sort(desc(impfact2)))
most_sig_stats
param_df1 <- merge(data.frame(mc_index = 1:500), data.frame(var_num = N))
param_df <- merge(param_df1, data.frame(k = K))
knn_err_est_df <- ddply(param_df[1:times, ], .(mc_index, var_num, k), function(df) {
err <- core_knn(df$mc_index[1], df$var_num[1], df$k[1])
err
})
param_df1 <- merge(data.frame(mc_index = 1:500), data.frame(var_num = N))
param_df <- merge(param_df1, data.frame(k = K))
knn_err_est_df <- ddply(param_df[1:times, ], (mc_index, var_num, k), function(df) {
param_df1 <- merge(data.frame(mc_index = 1:500), data.frame(var_num = N))
param_df <- merge(param_df1, data.frame(k = K))
knn_err_est_df <- ddply(param_df[1:times, ], mc_index, var_num, k, function(df) {
err <- core_knn(df$mc_index[1], df$var_num[1], df$k[1])
err
})
param_df1 <- merge(data.frame(mc_index = 1:500), data.frame(var_num = N))
param_df <- merge(param_df1, data.frame(k = K))
knn_err_est_df <- ddply(param_df[1:times, ], c(mc_index, var_num, k), function(df) {
err <- core_knn(df$mc_index[1], df$var_num[1], df$k[1])
err
})
#Execution of the test with loops
paramter_errors_df <- data.frame(mc_index = as.integer(rep(NA, times = times)),
var_num = as.integer(rep(NA, times = times)),
k = as.integer(rep(NA, times = times)),
error = as.numeric(rep(NA, times = times)))
#Core knn_model:
# j = index, n = length of range of variables, k=k
core_knn <- function(j, n, k) {
knn_predict <- knn(train = dat_v_train_ord[training_family_L[[j]], 1:n],
test = dat_v_train_ord[validation_family_L[[j]], 1:n],
cl = AB_class_train[training_family_L[[j]]],
k = k)
tbl <- table(knn_predict, AB_class_train[validation_family_L[[j]]])
err <- (tbl[1, 2] + tbl[2, 1])/(tbl[1, 2] + tbl[2, 1]+tbl[1, 1] + tbl[2, 2])
err
}
param_df1 <- merge(data.frame(mc_index = 1:500), data.frame(var_num = N))
param_df <- merge(param_df1, data.frame(k = K))
knn_err_est_df <- ddply(param_df[1:times, ], c(mc_index, var_num, k), function(df) {
err <- core_knn(df$mc_index[1], df$var_num[1], df$k[1])
err
})
